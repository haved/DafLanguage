import "RelativeFile.daf";
import "Vector"; //From the include paths.

let counter:uint=0;
pub proc incrementCounter() -> uint {
	return ++counter;
}
pub proc getCounter() {
	return counter;
}

pub func square(x:int) -> int { //Functions can't access program state
	return x*x;
}
pub func square<T>(x:T) -> T { //Templates!
	return x*x;
}

pub interface Mat {
	getName() -> &char; //Immutable char pointer
	getEnergy() -> uint;
}

pub class Bolle implements Mat {
	put let staticField:=5;
	weight:float;
	volume:float;
	uncertain name:&char; //Doesn't have to be declared in constructor

	pub Bolle(weight:float, volume:float) { /*grams and ml*/
		this->weight = weight;
		this->volume = volume;
	}
	
	pub Bolle(bolle2:&Bolle) {
		this->weight = bolle2->weight;
		this->volume = bolle2->volume;
	}

	pub uncertain Bolle(weight:int) { //Volume is left undecided! Uncertain needed
		this->weight = weight;
	}

	pub inline const method getDensity() -> float { //Const means 'this' may me immutable
		return weight / volume;
	}

	pub inline method setName(name:&char) {
		this->name = name;
	}

	pub const inline method getName() -> &char { //Inline means inline :)
		return name;
	}

	pub const method getEnergy() -> uint {
		return #cast(int) weight*50;
	}
}

import "iostream";

pub proc main(argc:int, argv:&&char) -> int { //Pointer to pointer to char
	let mut bolle:Bolle(700, 50); //grams and ml
	let bolle_ptr:=&mut bolle; //Mutable pointer
	def bolle_ref:=@bolle_ptr; //Def's are compile time resolved!
	
	bolle.setName("Bolle Nr.1");
	printf("bolle_ptr->getName() returned %s", bolle_ptr->getName());
	
	{	//New scope
		let uncertain mut bolle2:Bolle; //No constructor requires uncertain!
		bolle2 = bolle; //Calls bolle2.Bolle(bolle); // = means copy-constructor
	
		printf("bolle2.getName() returned %s", bolle2.getName());
	}	//Pop that stack!
	
	printf("anotherProcedure uses getEnergy(): %d", anotherProcedure<Bolle, getEnergy>(bolle));
	printf("Goodbye");
}

def anotherProcedure := <T, T2>(& x:T) -> uint { //& x:T means reference
	return x.T2(); //Aw yeah (i hope)
}