#import "audioPlayer.daf"
#import "math.daf"

def TITLE="Audio Player"
def WIDTH=1600
def HEIGHT=900

def DEFAULT_NOTES = Note[]{Note(440, 4000, )}

def main=(str[] args) {
	let noteIndex = 0;
	let currentDuration = 0;	
	let frequencyCounter = 0;	

	let AudioPlayer audioPlayer; //Same as "audioPlayer()"	

	def getSamples=(Uint8[] streamIn) {
		let stream = cast(Sint16[]) streamIn; //This halves the length of the array. Rounded down.
		let len = stream.length();
		currentDuration += len;
		
		for(i = 0; i < len; i++) {
			frequencyCounter+=DEFAULT_NOTES[noteIndex].pitch;
			stream[i]=DEFAULT_NOTES[noteIndex].volume * sin(frequencyCounter * 2 * PI/audioPlayer.sampleRate);
		}
		if(currentDuration>DEFAULT_NOTES[noteIndex].duration) {
			noteIndex++;
			if(noteIndex >= DEFAULT_NOTES.length)
				audioPlayer.stop();
		}
	}

	audioPlayer.start(*getSamples);
}

class Note {
	int pitch;
	int volume;
	int duration;
	
	def Note=(&self, int pitch, int volume, int duration) -> Note* {
		self.pitch = pitch;
		self.volume = volume;
		self.duration = duration;
	}

	def octaveUp(&self) {
		self.pitch *= 2;
	}
}
