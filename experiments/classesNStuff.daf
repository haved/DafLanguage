#import "Math"

pub class Color {
	red:u8;
	green:u8;
	blur:u8;

	def Color:=(&self, red:u8, green:u8, blue:u8) {
		self.red = red;
		self.green = green;
		self.blue = blue;
	}
	
	def Filter:=(&self, maxRed:u8, maxGreen:u8, maxBlue:u8)->Color{
		let mut copy:=self;
		capToMax(mut copy.red,   maxRed);
		capToMax(mut copy.green, maxGreen);
		capToMax(mut copy.blue,  maxBlue);
		return copy;
	}
}

pub static class Util {
	//red:u8 //It's not legal!

	let Var:=4;
	def DoSomething:=() {
		Var++;
	}
	def GetVar()->int {
		Var
	}
	//def Something:=(&self){} Illegal! There's not &self in a static class
}

def TestMethod:=(){
	let mut color:Color{red:222, green:123, blue:200}; //Manually asigning
	let mut blue:Color(20, 20, 255); //Constructor
	let mut color3:=ReturningAColorOneWay();
	color3.blue=111;
	let colors:=new Color[3][];
	colors[0]=&mut color;
	colors[1]=&mut blue;
	colors[2]=&mut color3;
	for i:=0; i<colors.length; i++{
		colors[i][0]=colors[i]->Filter(170, 170, 200);
	}
}

def ReturningAColorOneWay:=()->Color {
	/*return*/ Color(222,222,222)/*;*/
}

def ReturningAnotherWay:=()->Color {
	Color{red:123}
}
